{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[  0.  27.  81. 300.  49.]\n",
      "[  0.   10.   53.  134.   47.7]\n",
      "[ 0.  23.  50.  79.  43.4]\n",
      "[ 0.  20.  49.  75.  43.6]\n",
      "[  0.   16.   48.  192.   44.8]\n",
      "[  0.    8.   40.  294.   43.7]\n",
      "[ 0.  18.  25.  64.  39.9]\n",
      "[  0.   26.   19.  176.   40.8]\n",
      "[  0.   21.   17.  248.   41.4]\n",
      "[  0.    7.   14.  301.   44.6]\n",
      "[ 0.  15.  12.  46.  40.9]\n",
      "[  0.  30.   9. 330.  36.]\n",
      "[ 0.  13.   5.  13.  39.7]\n",
      "[  0.  27.  81. 300.  49.]\n",
      "[  0.   10.   53.  134.   47.9]\n",
      "[ 0.  23.  50.  79.  43.2]\n",
      "[ 0.  20.  49.  75.  43.9]\n",
      "[  0.   16.   48.  192.   44.4]\n",
      "[  0.    8.   40.  294.   44.6]\n",
      "[ 0.  18.  25.  64.  39.9]\n",
      "[  0.   26.   19.  176.   40.9]\n",
      "[  0.   21.   17.  248.   41.6]\n",
      "[  0.    7.   14.  301.   44.6]\n",
      "[ 0.  15.  12.  46.  40.8]\n",
      "[  0.   30.    9.  330.   36.4]\n",
      "[ 0.  13.   5.  13.  39.6]\n",
      "[  0.   27.   81.  300.   48.4]\n",
      "[  0.   10.   53.  134.   47.7]\n",
      "[ 0.  23.  50.  79.  43.3]\n",
      "[ 0.  20.  49.  75.  43.8]\n",
      "[  0.   16.   48.  192.   44.2]\n",
      "[  0.    8.   40.  294.   45.2]\n",
      "[ 0.  18.  25.  64.  39.5]\n",
      "[  0.   26.   19.  176.   41.7]\n",
      "[  0.   21.   17.  248.   41.1]\n",
      "[  0.    7.   14.  301.   44.2]\n",
      "[ 0.  15.  12.  46.  40.3]\n",
      "[  0.  30.   9. 330.  37.]\n",
      "[ 0.  13.   5.  13.  38.7]\n",
      "File saved successfully.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "def nmea2dino(): # setting it up as a method will help to do user input later\n",
    "    # Read lines from the file\n",
    "    lines = open(\"WESL001021.txt\").readlines()\n",
    "\n",
    "    # Define the start pattern\n",
    "    start_pat = \"210101.log\"\n",
    "    \n",
    "    # Find indices of lines that start messages\n",
    "    n = [i for i, line in enumerate(lines) if line.strip() == start_pat]\n",
    "\n",
    "    # Initialize the snr_file matrix\n",
    "    snr_file = np.zeros((len(n) * 13, 5))\n",
    "    instances_counter = 0\n",
    "\n",
    "    # Process each message block\n",
    "#     for i in n:\n",
    "    for i in [0, 9, 18]:\n",
    "        # Determine whether to use battery log or not\n",
    "        if lines[i + 2].strip().lower() == \"[debug] filename (battery): 210101.bat\":\n",
    "            debug = 1\n",
    "            gga_msg = lines[i + 3]\n",
    "            gsv_msg = lines[i + 4]\n",
    "        else:\n",
    "            debug = 0\n",
    "            gga_msg = lines[i + 2]\n",
    "            gsv_msg = lines[i + 3]\n",
    "\n",
    "        # Extract time information from GGA message\n",
    "        gga_split = gga_msg.split(\",\")\n",
    "        h = float(gga_split[1][0:1])\n",
    "        m = float(gga_split[1][2:3])\n",
    "        s = float(gga_split[1][4:5])\n",
    "        seconds_elapsed = 3600 * h + 60 * m + s\n",
    "\n",
    "        # Extract information from GSV message\n",
    "        gsv_split = gsv_msg.split(\",\")\n",
    "        number_of_messages = int(gsv_split[1])\n",
    "        lines_to_consider = range(i + 3 + debug, i + 3  + debug + number_of_messages)\n",
    "\n",
    "        # Process each message in the block\n",
    "        for j in lines_to_consider:\n",
    "            current_msg = lines[j].split(\",\")\n",
    "            sats_in_this_message = (len(current_msg) - 4) // 4\n",
    "            # Process each satellite in the message\n",
    "            for k in range(sats_in_this_message):\n",
    "                f = 4 * k\n",
    "                try:\n",
    "                    prn = int(current_msg[4 + f]) # pseudorandom number (identifier; useful for arcs)\n",
    "                except:\n",
    "                    prn = None\n",
    "                try:\n",
    "                    elev = float(current_msg[5 + f]) # elevation in degrees\n",
    "                except:\n",
    "                    elev = None\n",
    "                try:\n",
    "                    az = float(current_msg[6 + f]) # azimuth in degrees\n",
    "                except:\n",
    "                    az = None\n",
    "                # Handle special case for the 4th satellite\n",
    "                if k == 3:\n",
    "                    snr_placehold = current_msg[7 + f]\n",
    "                    last_index_of_snr = snr_placehold.find('*')\n",
    "                    try: # these try-except blocks handle the cases in which there is no SNR data\n",
    "                        snr = float(snr_placehold[0:last_index_of_snr])\n",
    "                    except:\n",
    "                        snr = None\n",
    "                elif k == 0 and j == lines_to_consider[-1]:\n",
    "                    snr_placehold = current_msg[7 + f]\n",
    "                    last_index_of_snr = snr_placehold.find('*')\n",
    "                    try:\n",
    "                        snr = float(snr_placehold[0:last_index_of_snr])\n",
    "                    except:\n",
    "                        snr = None\n",
    "                else:\n",
    "                    try:\n",
    "                        snr = float(current_msg[7 + f])\n",
    "                    except:\n",
    "                        snr = None\n",
    "\n",
    "                # Populate the snr_file matrix\n",
    "                snr_file[instances_counter, :] = [seconds_elapsed, prn, elev, az, snr]\n",
    "                instances_counter += 1\n",
    "\n",
    "    # Trim the snr_file matrix to the actual data\n",
    "    snr_file = snr_file[:instances_counter, :]\n",
    "        \n",
    "    try:\n",
    "        np.savetxt(\"snrdata.txt\", snr_file)\n",
    "        print(\"File saved successfully.\")\n",
    "    except Exception as e:\n",
    "        print(f\"An error occurred: {e}\")\n",
    "\n",
    "nmea2dino()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "range(0, 4)\n"
     ]
    }
   ],
   "source": [
    "print(range(4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
